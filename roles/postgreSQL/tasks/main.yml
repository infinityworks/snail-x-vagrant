---
- name: install PostgreSQL
  sudo: yes
  apt: name={{ item }} update_cache=true state=present
  with_items:
    - postgresql
    - postgresql-contrib
    - libpq-dev
    - python3-psycopg2
    - python-psycopg2

- name: Ensure the PostgreSQL service is running
  service: 
    name: postgresql 
    state: started 
    enabled: yes

- name: Create postgres user
  become: yes
  become_user: postgres
  postgresql_user:
    name: "root"
    password: "psqlpass"
    encrypted: "yes"

- name: Drop database if exists
  become: true
  shell: dropdb --if-exists snailRacing

- name: Create postgres database
  become_user: postgres
  postgresql_db:
    name: "snailRacing"
    owner: "root"
    template: template0
    encoding: UTF8
    lc_collate: 'en_US.UTF-8'
    lc_ctype: 'en_US.UTF-8'

- name: Ensure user has access to database
  become: yes
  become_user: postgres
  postgresql_privs:
    db: "snailRacing"
    role: "root"
    objs: ALL_IN_SCHEMA
    privs: ALL
    
- name: copy Python database script
  copy:
    src: DBCreateScript.py
    dest: /vagrant

- name: run Python database create script
  become: true
  shell: python3 /vagrant/DBCreateScript.py

- name: run Python database insert script with closed rounds
  become: true
  shell: python3 /vagrant/closed_rounds.py

#- name: run Python database insert script
#  become: true
#  shell: python3 /vagrant/insert_db.py

#- name: run Python database insert script with open round
#  become: true
#  shell: python3 /vagrant/open_insert_db.py

#- name: run Python database insert script with future round
#  become: true
#  shell: python3 /vagrant/future_insert_db.py

# - name: run Python database insert script with inflight round
#   become: true
#   shell: python3 /vagrant/inflight_insert_db.py

#- name: run Python database insert script with no future round
#  become: true
#  shell: python3 /vagrant/no_future_insert_db.py